
ODC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000380  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003af  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000003bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000150e  00000000  00000000  00000485  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d3  00000000  00000000  000020e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  000027bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000087d  00000000  00000000  00002b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000033fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002fe  000002fe  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000014  000002ea  000002ea  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_voidSHD 00000064  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_voidSendEnable 00000022  00000292  00000292  00000306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_voidSendData 00000034  0000022a  0000022a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_voidSendCommand 00000034  0000025e  0000025e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_voidInit 0000003e  000001ec  000001ec  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.DIO_voidSetPinVal 000000e0  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.DIO_voidSetPortDir 00000020  000002b4  000002b4  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  00000306  00000306  0000037a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  00000308  00000308  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  0000030a  0000030a  0000037e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  000002d4  000002d4  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  00000302  00000302  00000376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
   8:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
   c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  10:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  14:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  18:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  1c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  20:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  24:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  28:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  2c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  30:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  34:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  38:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  3c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  40:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  44:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  48:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  4c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  50:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  a0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

000002fe <__bad_interrupt>:
 2fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000002ea <main>:
#define  F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
	DIO_voidSetPortDir(LCD_DPORT, OUTPUT);
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_voidSetPortDir>
	LCD_voidInit();
 2f2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_voidInit>
	LCD_voidSendData('R');
 2f6:	82 e5       	ldi	r24, 0x52	; 82
 2f8:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_voidSendData>
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <main+0x12>

Disassembly of section .text.LCD_voidSHD:

00000188 <LCD_voidSHD>:

#define  F_CPU 16000000UL
#include <util/delay.h>


void LCD_voidSendHighData(u8 copy_u8data)
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	00 d0       	rcall	.+0      	; 0x192 <LCD_voidSHD+0xa>
 192:	00 d0       	rcall	.+0      	; 0x194 <LCD_voidSHD+0xc>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	08 2f       	mov	r16, r24
{
	u8 LCD_PINS[4] = {LCD_D4_PIN, LCD_D5_PIN, LCD_D6_PIN, LCD_D7_PIN};
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	8a 83       	std	Y+2, r24	; 0x02
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	8b 83       	std	Y+3, r24	; 0x03
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	8c 83       	std	Y+4, r24	; 0x04
	u8 LOC_u8it = 0;
	for (LOC_u8it = 0; LOC_u8it < 4; LOC_u8it++)
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <LCD_voidSHD+0x4e>
	{
		/*Getting the value of each bit in each iteration*/
 1ae:	40 2f       	mov	r20, r16
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	01 2e       	mov	r0, r17
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <LCD_voidSHD+0x32>
 1b6:	55 95       	asr	r21
 1b8:	47 95       	ror	r20
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <LCD_voidSHD+0x2e>
 1be:	41 70       	andi	r20, 0x01	; 1
 1c0:	e1 e0       	ldi	r30, 0x01	; 1
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ec 0f       	add	r30, r28
 1c6:	fd 1f       	adc	r31, r29
 1c8:	e1 0f       	add	r30, r17
 1ca:	f1 1d       	adc	r31, r1
 1cc:	60 81       	ld	r22, Z
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>

void LCD_voidSendHighData(u8 copy_u8data)
{
	u8 LCD_PINS[4] = {LCD_D4_PIN, LCD_D5_PIN, LCD_D6_PIN, LCD_D7_PIN};
	u8 LOC_u8it = 0;
	for (LOC_u8it = 0; LOC_u8it < 4; LOC_u8it++)
 1d4:	1f 5f       	subi	r17, 0xFF	; 255
 1d6:	14 30       	cpi	r17, 0x04	; 4
 1d8:	50 f3       	brcs	.-44     	; 0x1ae <LCD_voidSHD+0x26>
		/*Getting the value of each bit in each iteration*/
		DIO_voidSetPinVal(LCD_DPORT, LCD_PINS[LOC_u8it], GET_BIT(copy_u8data, LOC_u8it));
	}
}

void LCD_voidSendEnablePulse()
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

Disassembly of section .text.LCD_voidSendEnable:

00000292 <LCD_voidSendEnable>:
{
	/*Send Enable pulse*/
	DIO_voidSetPinVal(LCD_CPORT, LCD_EN_PIN, HIGH);
	_delay_ms(2);
	DIO_voidSetPinVal(LCD_CPORT, LCD_EN_PIN, LOW);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f e3       	ldi	r24, 0x3F	; 63
 29e:	9f e1       	ldi	r25, 0x1F	; 31
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_voidSendEnable+0xe>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_voidSendEnable+0x14>
 2a6:	00 00       	nop
}

 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	63 e0       	ldi	r22, 0x03	; 3
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
 2b2:	08 95       	ret

Disassembly of section .text.LCD_voidSendData:

0000022a <LCD_voidSendData>:
void LCD_voidSendCommand(u8 copy_u8command)
{
	/*Making RS pin as low to send command*/
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
	DIO_voidSetPinVal(LCD_CPORT, LCD_RS_PIN, LOW);
	
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
	/*Making RW pin as ow to write command*/
	DIO_voidSetPinVal(LCD_CPORT, LCD_RW_PIN, LOW);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
	
	/*Check if it was 4_bit_mode or 8_bit_mode*/
 242:	8c 2f       	mov	r24, r28
 244:	82 95       	swap	r24
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_voidSHD>
	#if LCD_MODE == _8_BIT_MODE
 24c:	0e 94 49 01 	call	0x292	; 0x292 <LCD_voidSendEnable>
		/*Send Command*/
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_voidSHD>
		DIO_voidSetPortVal(LCD_DPORT, copy_u8command);
 256:	0e 94 49 01 	call	0x292	; 0x292 <LCD_voidSendEnable>
		LCD_voidSendEnablePulse();
		/*Sending the LSBs of the command*/
		LCD_voidSendHighData(copy_u8command);
		LCD_voidSendEnablePulse();
	#endif	
}
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

Disassembly of section .text.LCD_voidSendCommand:

0000025e <LCD_voidSendCommand>:

 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
void LCD_voidSendData(u8 copy_u8data)
{
	/*Making RS pin as high to send data*/
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
	DIO_voidSetPinVal(LCD_CPORT, LCD_RS_PIN, HIGH);
	
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
	/*Making RW pin as ow to write data*/
	DIO_voidSetPinVal(LCD_CPORT, LCD_RW_PIN, LOW);
	
 276:	8c 2f       	mov	r24, r28
 278:	82 95       	swap	r24
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_voidSHD>
	/*Check if it was 4_bit_mode or 8_bit_mode*/
 280:	0e 94 49 01 	call	0x292	; 0x292 <LCD_voidSendEnable>
	#if LCD_MODE == _8_BIT_MODE
 284:	8c 2f       	mov	r24, r28
 286:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_voidSHD>
	/*Send Data*/
 28a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_voidSendEnable>
	#elif LCD_MODE == _4_BIT_MODE
	/*Sending the MSBs of the data first*/
	LCD_voidSendHighData(copy_u8data>>4);
	LCD_voidSendEnablePulse();
	/*Sending the LSBs of the data*/
	LCD_voidSendHighData(copy_u8data);
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

000001ec <LCD_voidInit>:
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	83 ef       	ldi	r24, 0xF3	; 243
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <LCD_voidInit+0x6>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_voidInit+0x10>
 1fc:	00 00       	nop
}

void LCD_voidInit(void)
{
	_delay_ms(40);
	#if LCD_MODE == _8_BIT_MODE
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_voidSHD>
	/*Send command function set*/
 204:	0e 94 49 01 	call	0x292	; 0x292 <LCD_voidSendEnable>
	LCD_voidSendCommand(0b00111000)	//Activating 2 lines display and 5x7 dots character font set
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_voidSHD>
	
 20e:	0e 94 49 01 	call	0x292	; 0x292 <LCD_voidSendEnable>
	#elif LCD_MODE == _4_BIT_MODE
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_voidSHD>
	LCD_voidSendHighData(0b0010);
 218:	0e 94 49 01 	call	0x292	; 0x292 <LCD_voidSendEnable>
	LCD_voidSendEnablePulse();
	LCD_voidSendHighData(0b0010);
	LCD_voidSendEnablePulse();
 21c:	8c e0       	ldi	r24, 0x0C	; 12
 21e:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_voidSendCommand>
	LCD_voidSendHighData(0b1000);
	LCD_voidSendEnablePulse();
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_voidSendCommand>
 228:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinVal:

000000a8 <DIO_voidSetPinVal>:
		case DIO_PORTB: LOC_u8val=GET_BIT(PINB_REG, copy_u8pin); break;
		case DIO_PORTC: LOC_u8val=GET_BIT(PINC_REG, copy_u8pin); break;
		case DIO_PORTD: LOC_u8val=GET_BIT(PIND_REG, copy_u8pin); break;
	}
	return LOC_u8val;
}
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	a1 f5       	brne	.+104    	; 0x114 <DIO_voidSetPinVal+0x6c>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	89 f0       	breq	.+34     	; 0xd2 <DIO_voidSetPinVal+0x2a>
  b0:	28 f0       	brcs	.+10     	; 0xbc <DIO_voidSetPinVal+0x14>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	c9 f0       	breq	.+50     	; 0xe8 <DIO_voidSetPinVal+0x40>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	11 f1       	breq	.+68     	; 0xfe <DIO_voidSetPinVal+0x56>
  ba:	08 95       	ret
  bc:	2a b3       	in	r18, 0x1a	; 26
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinVal+0x20>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinVal+0x1c>
  cc:	82 2b       	or	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	27 b3       	in	r18, 0x17	; 23
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinVal+0x36>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinVal+0x32>
  e2:	82 2b       	or	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
  e8:	24 b3       	in	r18, 0x14	; 20
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinVal+0x4c>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinVal+0x48>
  f8:	82 2b       	or	r24, r18
  fa:	84 bb       	out	0x14, r24	; 20
  fc:	08 95       	ret
  fe:	21 b3       	in	r18, 0x11	; 17
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_voidSetPinVal+0x62>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_voidSetPinVal+0x5e>
 10e:	82 2b       	or	r24, r18
 110:	81 bb       	out	0x11, r24	; 17
 112:	08 95       	ret
 114:	41 11       	cpse	r20, r1
 116:	37 c0       	rjmp	.+110    	; 0x186 <DIO_voidSetPinVal+0xde>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	91 f0       	breq	.+36     	; 0x140 <DIO_voidSetPinVal+0x98>
 11c:	28 f0       	brcs	.+10     	; 0x128 <DIO_voidSetPinVal+0x80>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	d9 f0       	breq	.+54     	; 0x158 <DIO_voidSetPinVal+0xb0>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	29 f1       	breq	.+74     	; 0x170 <DIO_voidSetPinVal+0xc8>
 126:	08 95       	ret
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinVal+0x8c>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinVal+0x88>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	8a bb       	out	0x1a, r24	; 26
 13e:	08 95       	ret
 140:	27 b3       	in	r18, 0x17	; 23
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinVal+0xa4>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinVal+0xa0>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	87 bb       	out	0x17, r24	; 23
 156:	08 95       	ret
 158:	24 b3       	in	r18, 0x14	; 20
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinVal+0xbc>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinVal+0xb8>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	08 95       	ret
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinVal+0xd4>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinVal+0xd0>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	81 bb       	out	0x11, r24	; 17
 186:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortDir:

000002b4 <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 copy_u8port, u8 copy_u8dir)
{
	switch(copy_u8port){
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	41 f0       	breq	.+16     	; 0x2c8 <DIO_voidSetPortDir+0x14>
 2b8:	28 f0       	brcs	.+10     	; 0x2c4 <DIO_voidSetPortDir+0x10>
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	39 f0       	breq	.+14     	; 0x2cc <DIO_voidSetPortDir+0x18>
 2be:	83 30       	cpi	r24, 0x03	; 3
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <DIO_voidSetPortDir+0x1c>
 2c2:	08 95       	ret
		case DIO_PORTA: DDRA_REG=copy_u8dir; break;
 2c4:	6b bb       	out	0x1b, r22	; 27
 2c6:	08 95       	ret
		case DIO_PORTB: DDRB_REG=copy_u8dir; break;
 2c8:	68 bb       	out	0x18, r22	; 24
 2ca:	08 95       	ret
		case DIO_PORTC: DDRC_REG=copy_u8dir; break;
 2cc:	65 bb       	out	0x15, r22	; 21
 2ce:	08 95       	ret
		case DIO_PORTD: DDRD_REG=copy_u8dir; break;
 2d0:	62 bb       	out	0x12, r22	; 18
 2d2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000306 <_fini>:
 306:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000308 <__funcs_on_exit>:
 308:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000030a <__simulator_exit>:
 30a:	08 95       	ret

Disassembly of section .text.exit:

000002d4 <exit>:
 2d4:	ec 01       	movw	r28, r24
 2d6:	0e 94 84 01 	call	0x308	; 0x308 <__funcs_on_exit>
 2da:	0e 94 83 01 	call	0x306	; 0x306 <_fini>
 2de:	ce 01       	movw	r24, r28
 2e0:	0e 94 85 01 	call	0x30a	; 0x30a <__simulator_exit>
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 81 01 	call	0x302	; 0x302 <_Exit>

Disassembly of section .text._Exit:

00000302 <_Exit>:
 302:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
