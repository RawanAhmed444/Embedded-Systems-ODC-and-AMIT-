
SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000014a  000001de  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000021b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000824  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000593  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000220  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000128  00000128  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       00000014  00800060  00000136  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    00000062  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000130  00000130  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000132  00000132  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000134  00000134  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000112  00000112  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  0000012c  0000012c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 74       	andi	r16, 0x40	; 64
  58:	00 01       	movw	r0, r0
  5a:	36 00       	.word	0x0036	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 89 00 	jmp	0x112	; 0x112 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000000b0 <main>:

#define F_CPU 16000000UL // Define the system clock frequency


int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	64 97       	sbiw	r28, 0x14	; 20
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	/*Hex values of pins in PORTD to display numbers*/
	int arr [10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F} ;
  c4:	84 e1       	ldi	r24, 0x14	; 20
  c6:	e0 e6       	ldi	r30, 0x60	; 96
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	de 01       	movw	r26, r28
  cc:	11 96       	adiw	r26, 0x01	; 1
  ce:	01 90       	ld	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	8a 95       	dec	r24
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x1e>
	DDRD = 0x7F ;	// Setting all pins of PORTD as output except D7 (not needed) 
  d6:	8f e7       	ldi	r24, 0x7F	; 127
  d8:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
        /*Displaying numbers on PORTD from 0 to 9 with delay 1 second between*/ 
		for (int x = 0; x < 10; x++)
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	15 c0       	rjmp	.+42     	; 0x10a <main+0x5a>
		{
			PORTD = arr[x] ;
  e0:	fc 01       	movw	r30, r24
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	2c 0f       	add	r18, r28
  ec:	3d 1f       	adc	r19, r29
  ee:	e2 0f       	add	r30, r18
  f0:	f3 1f       	adc	r31, r19
  f2:	20 81       	ld	r18, Z
  f4:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	3f e7       	ldi	r19, 0x7F	; 127
  f8:	44 e8       	ldi	r20, 0x84	; 132
  fa:	2e e1       	ldi	r18, 0x1E	; 30
  fc:	31 50       	subi	r19, 0x01	; 1
  fe:	40 40       	sbci	r20, 0x00	; 0
 100:	20 40       	sbci	r18, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x4c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x56>
 106:	00 00       	nop
	int arr [10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F} ;
	DDRD = 0x7F ;	// Setting all pins of PORTD as output except D7 (not needed) 
    while(1)
    {
        /*Displaying numbers on PORTD from 0 to 9 with delay 1 second between*/ 
		for (int x = 0; x < 10; x++)
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	8a 30       	cpi	r24, 0x0A	; 10
 10c:	91 05       	cpc	r25, r1
 10e:	44 f3       	brlt	.-48     	; 0xe0 <main+0x30>
 110:	e4 cf       	rjmp	.-56     	; 0xda <main+0x2a>

Disassembly of section .text.__dummy_fini:

00000130 <_fini>:
 130:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000132 <__funcs_on_exit>:
 132:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000134 <__simulator_exit>:
 134:	08 95       	ret

Disassembly of section .text.exit:

00000112 <exit>:
 112:	ec 01       	movw	r28, r24
 114:	0e 94 99 00 	call	0x132	; 0x132 <__funcs_on_exit>
 118:	0e 94 98 00 	call	0x130	; 0x130 <_fini>
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 9a 00 	call	0x134	; 0x134 <__simulator_exit>
 122:	ce 01       	movw	r24, r28
 124:	0e 94 96 00 	call	0x12c	; 0x12c <_Exit>

Disassembly of section .text._Exit:

0000012c <_Exit>:
 12c:	0e 94 56 00 	call	0xac	; 0xac <_exit>
